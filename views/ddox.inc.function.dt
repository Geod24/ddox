- import ddox.api;
- import ddox.highlight;
- import std.algorithm;

- void outputFunctionPrototype(FunctionDeclaration item)
	- auto docgroup = item.docGroup;
	- auto mems = docgroup.members;
	- foreach (size_t pi, pd; mems)
		- auto proto = cast(FunctionDeclaration)pd;
		- if (!proto) continue;
		- auto attribs = proto.attributes.dup;
		- if (pi > 0)
			br
			br
		- auto rettype = proto.name == "this" ? "" : info.formatType(proto.returnType, false) ~ " ";
		- if (rettype.length == 1 || rettype == "{null} ")
			- foreach (i, attr; attribs)
				- if (attr == "auto")
					- rettype = highlightDCode(attr) ~ " ";
					- break;
		- attribs = attribs.remove!(a => a.str == "auto");
		- auto attribute_prefix = highlightDCode(getAttributeString(attribs, AttributeStringKind.functionPrefix));
		- auto attribute_suffix = highlightDCode(getAttributeString(attribs, AttributeStringKind.functionSuffix));
		- auto variadic_suffix = highlightDCode(getVariadicSuffix(proto.type));
		- if (!proto.templateConstraint.length) attribute_suffix ~= "<span class=\"pun\">;</span>";

		- if (proto.parameters.length)
			| !{attribute_prefix}!{rettype}#[span.pln= proto.name]
			- info.renderTemplateArgs(&_diet_output, proto);
			span.pun (
			br
			- foreach (size_t i, p; proto.parameters)
				- auto pattribs = highlightDCode(getAttributeString(p.attributes, AttributeStringKind.normal));
				- auto suffix = i+1 < proto.parameters.length ? "<span class=\"pun\">,</span>" : variadic_suffix;
				- if (p.initializer)
					| &nbsp;&nbsp;!{pattribs}!{info.formatType(p.type, false)} #[span.pln= p.name] #[span.pun =] !{highlightDCode(p.initializer.valueString)}!{suffix}
				- else
					| &nbsp;&nbsp;!{pattribs}!{info.formatType(p.type, false)} #[span.pln= p.name]!{suffix}
				br
			|#[span.pun )]!{attribute_suffix}
		- else
			| !{attribute_prefix}!{rettype}#[span.pln= proto.name]
			- info.renderTemplateArgs(&_diet_output, proto);
			| #[span.pun<> (]!{variadic_suffix}#[span.pun )]!{attribute_suffix}

		- if (proto.templateConstraint.length)
			br
			|#[span.kwd if] #[span.pun (]!{highlightDCode(proto.templateConstraint)}#[span.pun );]
