- import ddox.api;
- import ddox.highlight;
- import std.algorithm;
- import std.typetuple;

- void outputTemplatePrototype(TemplateDeclaration item)
	| <span class="kwd">template</span> <span class="pln">#{item.name}</span>
	- info.renderTemplateArgs(&_diet_output, item);
	| ;

- void outputTemplateMembers(TemplateDeclaration item, int hlevel)
	- alias TypeTuple!(FunctionDeclaration, InterfaceDeclaration, ClassDeclaration, StructDeclaration, UnionDeclaration, EnumDeclaration, AliasDeclaration, TemplateDeclaration) kinds;
	- static const kindnames =      ["Functions", "Interfaces", "Classes", "Structs", "Unions", "Enums", "Aliases", "Templates"];
	- static const kindnames_sing = ["Function",  "Interface",  "Class",   "Struct",  "Union",  "Enum",  "Alias",   "Template"];

	- if( hasChild!VariableDeclaration(item) )
		section
			- heading(hlevel, "Contained Variables");
			table
				col.caption
				tr
					th Name
					th Type
					th Description
				- foreach( f; getChildren!VariableDeclaration(item) )
					tr
						td
							a(href="#{info.linkTo(f)}")= f.name
							- if( f.inheritingDecl )
								| [inherited]
						td.typecol!= info.formatType(f.type)
						td!= info.formatDoc(f.docGroup, 3, sec => sec == "$Short")

	- foreach( i, kind; kinds )
		- if( hasChild!kind(item) )
			section
				- heading(hlevel, "Contained " ~ kindnames[i]);
				table
					col.caption
					tr
						th Name
						th Description
					- foreach( grp; getDocGroups!kind(item) )
						tr
							td
								a(href="#{info.linkTo(grp)}")= grp.name
								- if( grp.inheritingDecl )
									| [inherited]
							td!= info.formatDoc(grp.docGroup, 3, sec => sec == "$Short")
