- import ddox.api;
- import ddox.highlight;
- import std.algorithm;
- import std.string : toLower;
- import std.typetuple;

- void outputCompositePrototype(CompositeTypeDeclaration item)
	- auto cls_item = cast(ClassDeclaration)item;
	- auto intf_item = cast(InterfaceDeclaration)item;

	| <span class="kwd">#{item.kind.to!string.toLower()}</span> <span class="typ">#{item.name}</span>
	- info.renderTemplateArgs(&_diet_output, item);

	- bool first = true;
	- void outputBase(CachedType tp)
		- if (tp.typeName.among("Object", "object.Object"))
			- return;
		| !{first ? "<br>&nbsp;&nbsp;: " : "<br>&nbsp;&nbsp;, "}!{info.formatType(tp, false)}
		- first = false;

	- if (cls_item && (cls_item.baseClass || cls_item.derivedInterfaces.length))
		- if (cls_item.baseClass)
			- outputBase(cls_item.baseClass);
		- foreach (intf; cls_item.derivedInterfaces)
			- outputBase(intf);

	- if (intf_item && intf_item.derivedInterfaces.length)
		- foreach (intf; intf_item.derivedInterfaces)
			- outputBase(intf);

	- if (item.templateConstraint.length)
		| #[br]&nbsp;&nbsp;
		- if (item.templateConstraint.length)
			br
			| <span class="kwd">if</span> <span class="pun">(</span>!{highlightDCode(item.templateConstraint)}<span class="pun">);</span>
	- else
		span.pun ;

- void outputCompositeMembers(CompositeTypeDeclaration item, int hlevel)
	- alias TypeTuple!(InterfaceDeclaration, ClassDeclaration, StructDeclaration, UnionDeclaration, EnumDeclaration, AliasDeclaration, TemplateDeclaration) kinds;
	- static const kindnames =      ["Inner interfaces", "Inner classes", "Inner structs", "Unions", "Enums", "Aliases", "Templates"];
	- static const kindnames_sing = ["Inner interface",  "Inner class",   "Inner struct",  "Union",  "Enum",  "Alias",   "Template"];

	- FunctionDeclaration[] properties, methods, constructors;
	- foreach( itm; getDocGroups!FunctionDeclaration(item) )
		- if( itm.hasAttribute("@property") )
			- properties ~= itm;
		- else if( itm.name != "this" )
			- methods ~= itm;
		- else
			- constructors ~= itm;

	- if( constructors.length )
		section
			- heading(hlevel, "Constructors");
			table
				col.caption
				tr
					th Name
					th Description
				- foreach( p; constructors )
					tr
						td
							a(href="#{info.linkTo(p)}", class=declStyleClasses(p))
								code= p.name
						td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

	- if( hasChild!VariableDeclaration(item) )
		section
			- heading(hlevel, "Fields");
			table
				col.caption
				tr
					th Name
					th Type
					th Description
				- foreach( f; getChildren!VariableDeclaration(item) )
					tr
						td
							a(href="#{info.linkTo(f)}", class=declStyleClasses(f)) <code>#{f.name}</code>
						td.typecol!= info.formatType(f.type)
						td!= info.formatDoc(f.docGroup, 3, sec => sec == "$Short")

	- if( properties.length )
		section
			- heading(hlevel, "Properties");
			table
				col.caption
				tr
					th Name
					th Type
					th Description
				- foreach( p; properties )
					- auto mems = p.docGroup ? p.docGroup.members : [cast(Entity)p];
					tr
						td
							a(href="#{info.linkTo(p)}", class=declStyleClasses(p)) <code>#{p.name}</code>
							span.tableEntryAnnotation= anyPropertyGetter(mems) ? anyPropertySetter(mems) ? "[get, set]" : "[get]" : "[set]"
						td.typecol!= info.formatType(getPropertyType(mems))
						td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

	- if( methods.length )
		section
			- heading(hlevel, "Methods");
			table
				col.caption
				tr
					th Name
					th Description
				- foreach( p; methods )
					tr
						td
							a(href="#{info.linkTo(p)}", class=declStyleClasses(p))
								code= p.name
						td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

	- foreach( i, kind; kinds )
		- if( hasChild!kind(item) )
			section
				- heading(hlevel, kindnames[i]);
				table
					col.caption
					tr
						th Name
						th Description
					- foreach( grp; getDocGroups!kind(item) )
						tr
							td
								a(href="#{info.linkTo(grp)}", class=declStyleClasses(grp))
									code= grp.name
							td!= info.formatDoc(grp.docGroup, 3, sec => sec == "$Short")
